import org.apache.tools.ant.filters.ReplaceTokens
import org.beryx.jlink.JlinkTask

plugins {
    id 'application'
    id 'org.moditect.gradleplugin' version '1.0.0-rc3'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.23.3'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('fr.osallek:clausewitz-parser:1.1.1') {
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.logging.log4j'
    }
    implementation('fr.osallek:eu4-parser:1.1.0') {
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.apache.commons'
        exclude group: 'commons-io'
    }
    implementation('org.controlsfx:controlsfx:11.0.3') {
        exclude group: 'org.openjfx'
    }
    implementation 'com.twelvemonkeys.imageio:imageio-tga:3.5'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    implementation 'org.apache.logging.log4j:log4j-api:2.14.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.0'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.11.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.14.0'
    implementation files("$buildDir/generated-modules/commons-lang3-3.11.jar")
    implementation files("$buildDir/generated-modules/commons-collections4-4.4.jar")
    implementation files("$buildDir/generated-modules/commons-io-2.7.jar")
}

group = 'fr.osallek'
version = '1.1.1'
description = 'Eu4SaveEditor'

processResources {
    filter(ReplaceTokens, tokens: [version: project.version])
}

java {
    modularity.inferModulePath = true
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

List<String> runArgs = [
        "--add-exports", "javafx.base/com.sun.javafx.event=org.controlsfx.controls",
        "--add-opens", "javafx.graphics/javafx.scene=org.controlsfx.controls",
        "--add-opens", "javafx.controls/javafx.scene.control.skin=org.controlsfx.controls",
        "-Xmx2g"]

application {
    mainModule = 'fr.osallek.eu4saveeditor'
    mainClass = 'fr.osallek.eu4saveeditor.Main'
    applicationDefaultJvmArgs = runArgs
}

javafx {
    version = '11.0.2'
    modules = ['javafx.controls', 'javafx.base', 'javafx.swing', 'javafx.fxml', 'javafx.media', 'javafx.graphics']
}

addDependenciesModuleInfo {
    overwriteExistingFiles = true
    jdepsExtraArgs = ['-q']
    outputDirectory = file("$buildDir/generated-modules")
    modules {
        module {
            artifact 'org.apache.commons:commons-lang3:3.11'
            moduleInfoSource = '''
                module org.apache.commons.lang3 {
                    requires java.se;
                    exports org.apache.commons.lang3;
                    exports org.apache.commons.lang3.tuple;
                    exports org.apache.commons.lang3.function;
                    exports org.apache.commons.lang3.arch;
                    exports org.apache.commons.lang3.reflect;
                }
            '''
        }
        module {
            artifact 'org.apache.commons:commons-collections4:4.4'
            moduleInfoSource = '''
                module org.apache.commons.collections4 {
                    requires java.se;
                    exports org.apache.commons.collections4;
                    exports org.apache.commons.collections4.iterators;
                }
            '''
        }
        module {
            artifact 'commons-io:commons-io:2.7'
            moduleInfoSource = '''
                module org.apache.commons.io {
                    requires java.se;

                    exports org.apache.commons.io;
                }
            '''
        }
    }
}

task copyModules(type: Copy) {
    into "${buildDir}/modules"
    from configurations.runtimeClasspath
}

task copyOutput(type: Copy) {
    into "${buildDir}/modules"
    from "${buildDir}/libs"
}

jlink {
    imageDir = file("$buildDir/image")
    options = ['--compress', '2',
               '--no-header-files',
               '--no-man-pages']
    forceMerge('log4j-api')
    forceMerge('slf4j-api')
    launcher {
        name = 'Eu4SaveEditor'
        jvmArgs = runArgs
    }

    customImage {
        appModules = [
                'org.slf4j',
                'fr.osallek.eu4saveeditor',
        ]
    }
}

task createImage(type: JlinkTask, dependsOn: [copyModules, copyOutput]) {
}

task copyResourcesJlink(type: Copy, dependsOn: [createImage]) {
    into "${buildDir}/image"
    from "${projectDir}/src/assembly/jlink"
}

task createJlinkZip(type: Zip, dependsOn: [copyResourcesJlink]) {
    destinationDirectory = buildDir
    archiveFileName = 'Eu4SaveEditor-windows-' + project.version + '.zip'
    from ("${buildDir}/image") {
        into('Eu4SaveEditor-windows-' + project.version)
    }
}

task copyResourcesFat(type: Copy) {
    from("${projectDir}/src/assembly/fat") {
        filter(ReplaceTokens, tokens: [version: project.version])
    }
    into "${buildDir}/fat"
}

task customFatJar(type: Jar, dependsOn: [copyResourcesFat]) {
    destinationDirectory = file("$buildDir/fat")
    archiveBaseName = 'Eu4SaveEditor-java'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath

    manifest {
        attributes 'Main-Class': 'fr.osallek.eu4saveeditor.Main'
        attributes 'Implementation-Version': project.version
    }

    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

task createFatZip(type: Zip, dependsOn: [customFatJar]) {
    destinationDirectory = buildDir
    archiveFileName = 'Eu4SaveEditor-java-' + project.version + '.zip'
    from ("${buildDir}/fat") {
        into('Eu4SaveEditor-java-' + project.version)
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
